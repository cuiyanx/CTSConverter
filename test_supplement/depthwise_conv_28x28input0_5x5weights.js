describe('CTS Supplement Test', function() {
  const assert = chai.assert;
  const nn = navigator.ml.getNeuralNetworkContext();

  it('check result for Depthwise conv 28x28 input0 5x5 weights example', async function() {
    let model = await nn.createModel(options);
    let operandIndex = 0;

    let op2_value = [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                      1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28];

    let op3_expect = [ 348,  570,  840, 1110, 1380, 1650, 1920, 2190, 2460, 2730, 3000, 3270, 3540, 3810,
                      4080, 4350, 4620, 4890, 5160, 5430, 5700, 5970, 6240, 6510, 6780, 7050, 5580, 4137,
                       404,  660,  970, 1280, 1590, 1900, 2210, 2520, 2830, 3140, 3450, 3760, 4070, 4380,
                      4690, 5000, 5310, 5620, 5930, 6240, 6550, 6860, 7170, 7480, 7790, 8100, 6380, 4706,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       430,  700, 1025, 1350, 1675, 2000, 2325, 2650, 2975, 3300, 3625, 3950, 4275, 4600,
                      4925, 5250, 5575, 5900, 6225, 6550, 6875, 7200, 7525, 7850, 8175, 8500, 6650, 4870,
                       284,  460,  670,  880, 1090, 1300, 1510, 1720, 1930, 2140, 2350, 2560, 2770, 2980,
                      3190, 3400, 3610, 3820, 4030, 4240, 4450, 4660, 4870, 5080, 5290, 5500, 4260, 3086,
                       168,  270,  390,  510,  630,  750,  870,  990, 1110, 1230, 1350, 1470, 1590, 1710,
                      1830, 1950, 2070, 2190, 2310, 2430, 2550, 2670, 2790, 2910, 3030, 3150, 2400, 1707];

    let type0 = {type: nn.INT32};
    let type2 = {type: nn.TENSOR_FLOAT32, dimensions: [1, 5, 5, 1]};
    let type2_length = product(type2.dimensions);
    let type1 = {type: nn.TENSOR_FLOAT32, dimensions: [1, 28, 28, 1]};
    let type1_length = product(type1.dimensions);
    let type3 = {type: nn.TENSOR_FLOAT32, dimensions: [1]};
    let type3_length = product(type3.dimensions);

    let b4 = operandIndex++;
    model.addOperand(type0);
    let b5 = operandIndex++;
    model.addOperand(type0);
    let b6 = operandIndex++;
    model.addOperand(type0);
    let b7 = operandIndex++;
    model.addOperand(type0);
    let b8 = operandIndex++;
    model.addOperand(type0);
    let op2 = operandIndex++;
    model.addOperand(type1);
    let op3 = operandIndex++;
    model.addOperand(type1);
    let op0 = operandIndex++;
    model.addOperand(type2);
    let op1 = operandIndex++;
    model.addOperand(type3);

    model.setOperandValue(b4, new Int32Array([1]));
    model.setOperandValue(b5, new Int32Array([1]));
    model.setOperandValue(b6, new Int32Array([1]));
    model.setOperandValue(b7, new Int32Array([1]));
    model.setOperandValue(b8, new Int32Array([0]));

    let weights_data = new Float32Array([ 1,  2,  3,  4,  5,
                                          6,  7,  8,  9, 10,
                                         11, 12, 13, 14, 15,
                                         16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25]);
    model.setOperandValue(op0, new Float32Array(weights_data));
    model.setOperandValue(op1, new Float32Array([0]));
    model.addOperation(nn.DEPTHWISE_CONV_2D, [op2, op0, op1, b4, b5, b6, b7, b8], [op3]);

    model.identifyInputsAndOutputs([op2], [op3]);
    await model.finish();

    let compilation = await model.createCompilation();
    compilation.setPreference(getPreferenceCode(options.prefer));
    await compilation.finish();

    let execution = await compilation.createExecution();

    let op2_input = new Float32Array(op2_value);
    execution.setInput(0, op2_input);

    let op3_output = new Float32Array(type1_length);
    execution.setOutput(0, op3_output);

    await execution.startCompute();

    for (let i = 0; i < type1_length; ++i) {
      assert.isTrue(almostEqualCTS(op3_output[i], op3_expect[i]));
    }
  });
});
